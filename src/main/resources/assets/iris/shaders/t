#version 410
// Generated by glsl-transformer
in vec2 iris_UV2;
in vec2 iris_UV0;
in vec3 iris_Normal;
in vec3 iris_Position;
uniform vec4 iris_ColorModulator;
in vec4 iris_Color;
uniform vec3 iris_ChunkOffset;
uniform mat3 iris_NormalMat;
uniform mat4 iris_ModelViewMatInverse;
uniform mat4 iris_ModelViewMat;
uniform mat4 iris_ProjMatInverse;
uniform mat4 iris_ProjMat;
uniform mat4 iris_TextureMat;
uniform float iris_FogDensity;
uniform float iris_FogStart;
uniform float iris_FogEnd;
uniform vec4 iris_FogColor;
struct iris_FogParameters {
vec4 color;
float density;
float start;
float end;
float scale;
};
iris_FogParameters iris_Fog = iris_FogParameters(iris_FogColor, iris_FogDensity, iris_FogStart, iris_FogEnd, 1.0f / (iris_FogEnd - iris_FogStart));
vec4 iris_FrontColor;
out float iris_FogFragCoord;
flat out ivec3 iris_entityInfo;
in ivec3 iris_Entity;
uniform sampler2D iris_overlay;
out vec4 entityColor;
out vec4 iris_vertexColor;
in ivec2 iris_UV1;
in vec3 Position;
in vec4 Color;
in vec2 UV0;
in ivec2 UV1;
in ivec2 UV2;
in vec3 Normal;
uniform sampler2D Sampler1;
uniform sampler2D Sampler2;
uniform mat4 ModelViewMat;
uniform mat4 ProjMat;
uniform int FogShape;
uniform vec3 Light0_Direction;
uniform vec3 Light1_Direction;
out float vertexDistance;
out vec4 vertexColor;
out vec4 shadedVertexColor;
out vec4 lightMapColor;
out vec4 overlayColor;
out vec2 texCoord0;
out vec4 normal;
vec4 minecraft_mix_light(vec3 lightDir0, vec3 lightDir1, vec3 normal, vec4 color) {
lightDir0 = normalize(lightDir0);
lightDir1 = normalize(lightDir1);
float light0 = max(0.0f, dot(lightDir0, normal));
float light1 = max(0.0f, dot(lightDir1, normal));
float lightAccum = min(1.0f, (light0 + light1) * 0.6f + 0.4f);
return vec4(color.rgb * lightAccum, color.a);
}
float fog_distance(mat4 modelViewMat, vec3 pos, int shape) {
if (shape == 0) {
return length((modelViewMat * vec4(pos, 1.0f)).xyz);
} else {
float distXZ = length((modelViewMat * vec4(pos.x, 0.0f, pos.z, 1.0f)).xyz);
float distY = length((modelViewMat * vec4(0.0f, pos.y, 0.0f, 1.0f)).xyz);
return max(distXZ, distY);
}
}
void main() {
iris_FogFragCoord = 0.0f;
iris_entityInfo = iris_Entity;
vec4 overlayColor = texelFetch(iris_overlay, iris_UV1, 0);
entityColor = vec4(overlayColor.rgb, 1.0f - overlayColor.a);
iris_vertexColor = iris_Color;
entityColor.rgb *= float(entityColor.a != 0.0f);
gl_Position = ProjMat * ModelViewMat * vec4(Position, 1.0f);
vec4 tint = vec4(mix(vec4(1, 1, 1, 1).rgb, Color.rgb, Color.a), vec4(1, 1, 1, 1).a);
vertexDistance = fog_distance(Position, FogShape);
vertexColor = minecraft_mix_light(Light0_Direction, Light1_Direction, Normal, vec4(1, 1, 1, 1));
shadedVertexColor = minecraft_mix_light(Light0_Direction, Light1_Direction, Normal, tint);
lightMapColor = texelFetch(Sampler2, UV2 / 16, 0);
overlayColor = texelFetch(Sampler1, UV1, 0);
texCoord0 = UV0;
normal = ProjMat * ModelViewMat * vec4(Normal, 0.0f);
}